import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        String receiptString = "============= Order details =============\n";
        int totalPrice = 0;
        int discountPrice = 0;

        List<Item> items = itemRepository.findAll();

        List<List<String>> salesPromotion = salesPromotionRepository.findAll()
            .stream()
            .map(sp -> sp.getRelatedItems())
            .collect(Collectors.toList());

        List<Item> promotionItems = new ArrayList<>();

        String promotionString = "Promotion used:\n";

        boolean promotionUsed = false;

        for (String input:inputs){
            String item_id = input.split("x")[0].trim();
            int quantity = Integer.parseInt(input.split("x")[1].trim());

            Item currentItem = items.stream()
                .filter(item -> item_id.equals(item.getId()))
                .findAny()
                .orElse(null);

            String itemName = currentItem.getName();
            double itemPrice = currentItem.getPrice();
            int price =(int) itemPrice * quantity;
            salesPromotion.forEach( sp ->{
                if (sp.contains(currentItem.getId())){
                    promotionItems.add(currentItem);
                }
            });

            if(promotionItems.contains(currentItem)){
                discountPrice += (int) itemPrice * quantity / 2;
                promotionUsed = true;
            }
            else{
                discountPrice += price;
            }

            totalPrice += price;
            receiptString += itemName + " x " + quantity + " = " + price + " yuan\n";
        }
        receiptString += "-----------------------------------\n";
        int finalPrice = totalPrice;

        if(totalPrice >= 30){
            finalPrice = finalPrice - 6;
            promotionUsed = true;
        }

        if(finalPrice < discountPrice){
            promotionString += "Deduct 6 yuan when the order reaches 30 yuan, saving " + (totalPrice - finalPrice) + " yuan\n";
        }
        else {
            promotionString += "Half price for certain dishes ";
            for(int i = 0; i < promotionItems.size(); i++){
                if(i == 0){
                    promotionString += "(" + promotionItems.get(i).getName();
                }
                else{
                    promotionString += " and "+ promotionItems.get(i).getName();
                }
            }
            finalPrice = discountPrice;
            promotionString += "), saving " + (totalPrice - finalPrice) + " yuan\n";
        }
        if (promotionUsed){
            receiptString += promotionString + "-----------------------------------\n";
        }
        receiptString += "Total: " + finalPrice + " yuan\n";
        receiptString += "===================================";
        return receiptString;
    }
}
